// Code generated by MockGen. DO NOT EDIT.
// Source: internal/routers/router.go
//
// Generated by this command:
//
//	mockgen -source=internal/routers/router.go -destination=internal/routers/service_mock.go -package=routers
//

// Package routers is a generated GoMock package.
package routers

import (
	reflect "reflect"

	models "github.com/volchkovski/go-practicum-metrics/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockmetricsProcessor is a mock of metricsProcessor interface.
type MockmetricsProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockmetricsProcessorMockRecorder
	isgomock struct{}
}

// MockmetricsProcessorMockRecorder is the mock recorder for MockmetricsProcessor.
type MockmetricsProcessorMockRecorder struct {
	mock *MockmetricsProcessor
}

// NewMockmetricsProcessor creates a new mock instance.
func NewMockmetricsProcessor(ctrl *gomock.Controller) *MockmetricsProcessor {
	mock := &MockmetricsProcessor{ctrl: ctrl}
	mock.recorder = &MockmetricsProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmetricsProcessor) EXPECT() *MockmetricsProcessorMockRecorder {
	return m.recorder
}

// GetAllCounterMetrics mocks base method.
func (m *MockmetricsProcessor) GetAllCounterMetrics() ([]*models.CounterMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCounterMetrics")
	ret0, _ := ret[0].([]*models.CounterMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCounterMetrics indicates an expected call of GetAllCounterMetrics.
func (mr *MockmetricsProcessorMockRecorder) GetAllCounterMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCounterMetrics", reflect.TypeOf((*MockmetricsProcessor)(nil).GetAllCounterMetrics))
}

// GetAllGaugeMetrics mocks base method.
func (m *MockmetricsProcessor) GetAllGaugeMetrics() ([]*models.GaugeMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGaugeMetrics")
	ret0, _ := ret[0].([]*models.GaugeMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGaugeMetrics indicates an expected call of GetAllGaugeMetrics.
func (mr *MockmetricsProcessorMockRecorder) GetAllGaugeMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGaugeMetrics", reflect.TypeOf((*MockmetricsProcessor)(nil).GetAllGaugeMetrics))
}

// GetCounterMetric mocks base method.
func (m *MockmetricsProcessor) GetCounterMetric(arg0 string) (*models.CounterMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounterMetric", arg0)
	ret0, _ := ret[0].(*models.CounterMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounterMetric indicates an expected call of GetCounterMetric.
func (mr *MockmetricsProcessorMockRecorder) GetCounterMetric(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounterMetric", reflect.TypeOf((*MockmetricsProcessor)(nil).GetCounterMetric), arg0)
}

// GetGaugeMetric mocks base method.
func (m *MockmetricsProcessor) GetGaugeMetric(arg0 string) (*models.GaugeMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGaugeMetric", arg0)
	ret0, _ := ret[0].(*models.GaugeMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGaugeMetric indicates an expected call of GetGaugeMetric.
func (mr *MockmetricsProcessorMockRecorder) GetGaugeMetric(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGaugeMetric", reflect.TypeOf((*MockmetricsProcessor)(nil).GetGaugeMetric), arg0)
}

// PingDB mocks base method.
func (m *MockmetricsProcessor) PingDB() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingDB")
	ret0, _ := ret[0].(error)
	return ret0
}

// PingDB indicates an expected call of PingDB.
func (mr *MockmetricsProcessorMockRecorder) PingDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingDB", reflect.TypeOf((*MockmetricsProcessor)(nil).PingDB))
}

// PushCounterMetric mocks base method.
func (m *MockmetricsProcessor) PushCounterMetric(arg0 *models.CounterMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushCounterMetric", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushCounterMetric indicates an expected call of PushCounterMetric.
func (mr *MockmetricsProcessorMockRecorder) PushCounterMetric(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushCounterMetric", reflect.TypeOf((*MockmetricsProcessor)(nil).PushCounterMetric), arg0)
}

// PushGaugeMetric mocks base method.
func (m *MockmetricsProcessor) PushGaugeMetric(arg0 *models.GaugeMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushGaugeMetric", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushGaugeMetric indicates an expected call of PushGaugeMetric.
func (mr *MockmetricsProcessorMockRecorder) PushGaugeMetric(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushGaugeMetric", reflect.TypeOf((*MockmetricsProcessor)(nil).PushGaugeMetric), arg0)
}
