// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/mstorage.go
//
// Generated by this command:
//
//	mockgen -source=internal/services/mstorage.go -destination=internal/services/mstorage_mock.go -package=services
//

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMetricsReadWriter is a mock of MetricsReadWriter interface.
type MockMetricsReadWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsReadWriterMockRecorder
	isgomock struct{}
}

// MockMetricsReadWriterMockRecorder is the mock recorder for MockMetricsReadWriter.
type MockMetricsReadWriterMockRecorder struct {
	mock *MockMetricsReadWriter
}

// NewMockMetricsReadWriter creates a new mock instance.
func NewMockMetricsReadWriter(ctrl *gomock.Controller) *MockMetricsReadWriter {
	mock := &MockMetricsReadWriter{ctrl: ctrl}
	mock.recorder = &MockMetricsReadWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsReadWriter) EXPECT() *MockMetricsReadWriterMockRecorder {
	return m.recorder
}

// ReadAllCounters mocks base method.
func (m *MockMetricsReadWriter) ReadAllCounters() (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllCounters")
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllCounters indicates an expected call of ReadAllCounters.
func (mr *MockMetricsReadWriterMockRecorder) ReadAllCounters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllCounters", reflect.TypeOf((*MockMetricsReadWriter)(nil).ReadAllCounters))
}

// ReadAllGauges mocks base method.
func (m *MockMetricsReadWriter) ReadAllGauges() (map[string]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllGauges")
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllGauges indicates an expected call of ReadAllGauges.
func (mr *MockMetricsReadWriterMockRecorder) ReadAllGauges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllGauges", reflect.TypeOf((*MockMetricsReadWriter)(nil).ReadAllGauges))
}

// ReadCounter mocks base method.
func (m *MockMetricsReadWriter) ReadCounter(arg0 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCounter", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCounter indicates an expected call of ReadCounter.
func (mr *MockMetricsReadWriterMockRecorder) ReadCounter(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCounter", reflect.TypeOf((*MockMetricsReadWriter)(nil).ReadCounter), arg0)
}

// ReadGauge mocks base method.
func (m *MockMetricsReadWriter) ReadGauge(arg0 string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadGauge", arg0)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadGauge indicates an expected call of ReadGauge.
func (mr *MockMetricsReadWriterMockRecorder) ReadGauge(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadGauge", reflect.TypeOf((*MockMetricsReadWriter)(nil).ReadGauge), arg0)
}

// WriteCounter mocks base method.
func (m *MockMetricsReadWriter) WriteCounter(arg0 string, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteCounter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteCounter indicates an expected call of WriteCounter.
func (mr *MockMetricsReadWriterMockRecorder) WriteCounter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCounter", reflect.TypeOf((*MockMetricsReadWriter)(nil).WriteCounter), arg0, arg1)
}

// WriteGauge mocks base method.
func (m *MockMetricsReadWriter) WriteGauge(arg0 string, arg1 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteGauge", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteGauge indicates an expected call of WriteGauge.
func (mr *MockMetricsReadWriterMockRecorder) WriteGauge(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteGauge", reflect.TypeOf((*MockMetricsReadWriter)(nil).WriteGauge), arg0, arg1)
}

// MockAllMetricsReader is a mock of AllMetricsReader interface.
type MockAllMetricsReader struct {
	ctrl     *gomock.Controller
	recorder *MockAllMetricsReaderMockRecorder
	isgomock struct{}
}

// MockAllMetricsReaderMockRecorder is the mock recorder for MockAllMetricsReader.
type MockAllMetricsReaderMockRecorder struct {
	mock *MockAllMetricsReader
}

// NewMockAllMetricsReader creates a new mock instance.
func NewMockAllMetricsReader(ctrl *gomock.Controller) *MockAllMetricsReader {
	mock := &MockAllMetricsReader{ctrl: ctrl}
	mock.recorder = &MockAllMetricsReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAllMetricsReader) EXPECT() *MockAllMetricsReaderMockRecorder {
	return m.recorder
}

// ReadAllCounters mocks base method.
func (m *MockAllMetricsReader) ReadAllCounters() (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllCounters")
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllCounters indicates an expected call of ReadAllCounters.
func (mr *MockAllMetricsReaderMockRecorder) ReadAllCounters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllCounters", reflect.TypeOf((*MockAllMetricsReader)(nil).ReadAllCounters))
}

// ReadAllGauges mocks base method.
func (m *MockAllMetricsReader) ReadAllGauges() (map[string]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllGauges")
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllGauges indicates an expected call of ReadAllGauges.
func (mr *MockAllMetricsReaderMockRecorder) ReadAllGauges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllGauges", reflect.TypeOf((*MockAllMetricsReader)(nil).ReadAllGauges))
}

// MockMetricsWriter is a mock of MetricsWriter interface.
type MockMetricsWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsWriterMockRecorder
	isgomock struct{}
}

// MockMetricsWriterMockRecorder is the mock recorder for MockMetricsWriter.
type MockMetricsWriterMockRecorder struct {
	mock *MockMetricsWriter
}

// NewMockMetricsWriter creates a new mock instance.
func NewMockMetricsWriter(ctrl *gomock.Controller) *MockMetricsWriter {
	mock := &MockMetricsWriter{ctrl: ctrl}
	mock.recorder = &MockMetricsWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsWriter) EXPECT() *MockMetricsWriterMockRecorder {
	return m.recorder
}

// WriteCounter mocks base method.
func (m *MockMetricsWriter) WriteCounter(arg0 string, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteCounter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteCounter indicates an expected call of WriteCounter.
func (mr *MockMetricsWriterMockRecorder) WriteCounter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCounter", reflect.TypeOf((*MockMetricsWriter)(nil).WriteCounter), arg0, arg1)
}

// WriteGauge mocks base method.
func (m *MockMetricsWriter) WriteGauge(arg0 string, arg1 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteGauge", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteGauge indicates an expected call of WriteGauge.
func (mr *MockMetricsWriterMockRecorder) WriteGauge(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteGauge", reflect.TypeOf((*MockMetricsWriter)(nil).WriteGauge), arg0, arg1)
}

// MockMetricsReader is a mock of MetricsReader interface.
type MockMetricsReader struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsReaderMockRecorder
	isgomock struct{}
}

// MockMetricsReaderMockRecorder is the mock recorder for MockMetricsReader.
type MockMetricsReaderMockRecorder struct {
	mock *MockMetricsReader
}

// NewMockMetricsReader creates a new mock instance.
func NewMockMetricsReader(ctrl *gomock.Controller) *MockMetricsReader {
	mock := &MockMetricsReader{ctrl: ctrl}
	mock.recorder = &MockMetricsReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsReader) EXPECT() *MockMetricsReaderMockRecorder {
	return m.recorder
}

// ReadCounter mocks base method.
func (m *MockMetricsReader) ReadCounter(arg0 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCounter", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCounter indicates an expected call of ReadCounter.
func (mr *MockMetricsReaderMockRecorder) ReadCounter(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCounter", reflect.TypeOf((*MockMetricsReader)(nil).ReadCounter), arg0)
}

// ReadGauge mocks base method.
func (m *MockMetricsReader) ReadGauge(arg0 string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadGauge", arg0)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadGauge indicates an expected call of ReadGauge.
func (mr *MockMetricsReaderMockRecorder) ReadGauge(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadGauge", reflect.TypeOf((*MockMetricsReader)(nil).ReadGauge), arg0)
}
