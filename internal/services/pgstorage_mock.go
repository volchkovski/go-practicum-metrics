// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/pgstorage.go
//
// Generated by this command:
//
//	mockgen -source=internal/services/pgstorage.go -destination=internal/services/pgstorage_mock.go -package=services
//

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPgWriter is a mock of PgWriter interface.
type MockPgWriter struct {
	ctrl     *gomock.Controller
	recorder *MockPgWriterMockRecorder
	isgomock struct{}
}

// MockPgWriterMockRecorder is the mock recorder for MockPgWriter.
type MockPgWriterMockRecorder struct {
	mock *MockPgWriter
}

// NewMockPgWriter creates a new mock instance.
func NewMockPgWriter(ctrl *gomock.Controller) *MockPgWriter {
	mock := &MockPgWriter{ctrl: ctrl}
	mock.recorder = &MockPgWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPgWriter) EXPECT() *MockPgWriterMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockPgWriter) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPgWriterMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPgWriter)(nil).Ping))
}

// WriteGaugesCounters mocks base method.
func (m *MockPgWriter) WriteGaugesCounters(gauges map[string]float64, counters map[string]int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteGaugesCounters", gauges, counters)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteGaugesCounters indicates an expected call of WriteGaugesCounters.
func (mr *MockPgWriterMockRecorder) WriteGaugesCounters(gauges, counters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteGaugesCounters", reflect.TypeOf((*MockPgWriter)(nil).WriteGaugesCounters), gauges, counters)
}

// MockPinger is a mock of Pinger interface.
type MockPinger struct {
	ctrl     *gomock.Controller
	recorder *MockPingerMockRecorder
	isgomock struct{}
}

// MockPingerMockRecorder is the mock recorder for MockPinger.
type MockPingerMockRecorder struct {
	mock *MockPinger
}

// NewMockPinger creates a new mock instance.
func NewMockPinger(ctrl *gomock.Controller) *MockPinger {
	mock := &MockPinger{ctrl: ctrl}
	mock.recorder = &MockPingerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPinger) EXPECT() *MockPingerMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockPinger) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPingerMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPinger)(nil).Ping))
}

// MockGaugesCountersWriter is a mock of GaugesCountersWriter interface.
type MockGaugesCountersWriter struct {
	ctrl     *gomock.Controller
	recorder *MockGaugesCountersWriterMockRecorder
	isgomock struct{}
}

// MockGaugesCountersWriterMockRecorder is the mock recorder for MockGaugesCountersWriter.
type MockGaugesCountersWriterMockRecorder struct {
	mock *MockGaugesCountersWriter
}

// NewMockGaugesCountersWriter creates a new mock instance.
func NewMockGaugesCountersWriter(ctrl *gomock.Controller) *MockGaugesCountersWriter {
	mock := &MockGaugesCountersWriter{ctrl: ctrl}
	mock.recorder = &MockGaugesCountersWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGaugesCountersWriter) EXPECT() *MockGaugesCountersWriterMockRecorder {
	return m.recorder
}

// WriteGaugesCounters mocks base method.
func (m *MockGaugesCountersWriter) WriteGaugesCounters(gauges map[string]float64, counters map[string]int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteGaugesCounters", gauges, counters)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteGaugesCounters indicates an expected call of WriteGaugesCounters.
func (mr *MockGaugesCountersWriterMockRecorder) WriteGaugesCounters(gauges, counters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteGaugesCounters", reflect.TypeOf((*MockGaugesCountersWriter)(nil).WriteGaugesCounters), gauges, counters)
}
