// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/storage.go
//
// Generated by this command:
//
//	mockgen -source=internal/services/storage.go -destination=internal/services/storage_mock.go -package=services
//

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMetricStorage is a mock of MetricStorage interface.
type MockMetricStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMetricStorageMockRecorder
	isgomock struct{}
}

// MockMetricStorageMockRecorder is the mock recorder for MockMetricStorage.
type MockMetricStorageMockRecorder struct {
	mock *MockMetricStorage
}

// NewMockMetricStorage creates a new mock instance.
func NewMockMetricStorage(ctrl *gomock.Controller) *MockMetricStorage {
	mock := &MockMetricStorage{ctrl: ctrl}
	mock.recorder = &MockMetricStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricStorage) EXPECT() *MockMetricStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMetricStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMetricStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMetricStorage)(nil).Close))
}

// Ping mocks base method.
func (m *MockMetricStorage) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockMetricStorageMockRecorder) Ping(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMetricStorage)(nil).Ping), arg0)
}

// ReadAllCounters mocks base method.
func (m *MockMetricStorage) ReadAllCounters(arg0 context.Context) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllCounters", arg0)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllCounters indicates an expected call of ReadAllCounters.
func (mr *MockMetricStorageMockRecorder) ReadAllCounters(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllCounters", reflect.TypeOf((*MockMetricStorage)(nil).ReadAllCounters), arg0)
}

// ReadAllGauges mocks base method.
func (m *MockMetricStorage) ReadAllGauges(arg0 context.Context) (map[string]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllGauges", arg0)
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllGauges indicates an expected call of ReadAllGauges.
func (mr *MockMetricStorageMockRecorder) ReadAllGauges(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllGauges", reflect.TypeOf((*MockMetricStorage)(nil).ReadAllGauges), arg0)
}

// ReadCounter mocks base method.
func (m *MockMetricStorage) ReadCounter(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCounter", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCounter indicates an expected call of ReadCounter.
func (mr *MockMetricStorageMockRecorder) ReadCounter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCounter", reflect.TypeOf((*MockMetricStorage)(nil).ReadCounter), arg0, arg1)
}

// ReadGauge mocks base method.
func (m *MockMetricStorage) ReadGauge(arg0 context.Context, arg1 string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadGauge", arg0, arg1)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadGauge indicates an expected call of ReadGauge.
func (mr *MockMetricStorageMockRecorder) ReadGauge(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadGauge", reflect.TypeOf((*MockMetricStorage)(nil).ReadGauge), arg0, arg1)
}

// WriteCounter mocks base method.
func (m *MockMetricStorage) WriteCounter(arg0 context.Context, arg1 string, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteCounter", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteCounter indicates an expected call of WriteCounter.
func (mr *MockMetricStorageMockRecorder) WriteCounter(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCounter", reflect.TypeOf((*MockMetricStorage)(nil).WriteCounter), arg0, arg1, arg2)
}

// WriteGauge mocks base method.
func (m *MockMetricStorage) WriteGauge(arg0 context.Context, arg1 string, arg2 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteGauge", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteGauge indicates an expected call of WriteGauge.
func (mr *MockMetricStorageMockRecorder) WriteGauge(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteGauge", reflect.TypeOf((*MockMetricStorage)(nil).WriteGauge), arg0, arg1, arg2)
}

// WriteGaugesCounters mocks base method.
func (m *MockMetricStorage) WriteGaugesCounters(ctx context.Context, gauges map[string]float64, counters map[string]int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteGaugesCounters", ctx, gauges, counters)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteGaugesCounters indicates an expected call of WriteGaugesCounters.
func (mr *MockMetricStorageMockRecorder) WriteGaugesCounters(ctx, gauges, counters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteGaugesCounters", reflect.TypeOf((*MockMetricStorage)(nil).WriteGaugesCounters), ctx, gauges, counters)
}

// MockCloser is a mock of Closer interface.
type MockCloser struct {
	ctrl     *gomock.Controller
	recorder *MockCloserMockRecorder
	isgomock struct{}
}

// MockCloserMockRecorder is the mock recorder for MockCloser.
type MockCloserMockRecorder struct {
	mock *MockCloser
}

// NewMockCloser creates a new mock instance.
func NewMockCloser(ctrl *gomock.Controller) *MockCloser {
	mock := &MockCloser{ctrl: ctrl}
	mock.recorder = &MockCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloser) EXPECT() *MockCloserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCloserMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCloser)(nil).Close))
}

// MockAllMetricsReader is a mock of AllMetricsReader interface.
type MockAllMetricsReader struct {
	ctrl     *gomock.Controller
	recorder *MockAllMetricsReaderMockRecorder
	isgomock struct{}
}

// MockAllMetricsReaderMockRecorder is the mock recorder for MockAllMetricsReader.
type MockAllMetricsReaderMockRecorder struct {
	mock *MockAllMetricsReader
}

// NewMockAllMetricsReader creates a new mock instance.
func NewMockAllMetricsReader(ctrl *gomock.Controller) *MockAllMetricsReader {
	mock := &MockAllMetricsReader{ctrl: ctrl}
	mock.recorder = &MockAllMetricsReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAllMetricsReader) EXPECT() *MockAllMetricsReaderMockRecorder {
	return m.recorder
}

// ReadAllCounters mocks base method.
func (m *MockAllMetricsReader) ReadAllCounters(arg0 context.Context) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllCounters", arg0)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllCounters indicates an expected call of ReadAllCounters.
func (mr *MockAllMetricsReaderMockRecorder) ReadAllCounters(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllCounters", reflect.TypeOf((*MockAllMetricsReader)(nil).ReadAllCounters), arg0)
}

// ReadAllGauges mocks base method.
func (m *MockAllMetricsReader) ReadAllGauges(arg0 context.Context) (map[string]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllGauges", arg0)
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllGauges indicates an expected call of ReadAllGauges.
func (mr *MockAllMetricsReaderMockRecorder) ReadAllGauges(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllGauges", reflect.TypeOf((*MockAllMetricsReader)(nil).ReadAllGauges), arg0)
}

// MockMetricsReader is a mock of MetricsReader interface.
type MockMetricsReader struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsReaderMockRecorder
	isgomock struct{}
}

// MockMetricsReaderMockRecorder is the mock recorder for MockMetricsReader.
type MockMetricsReaderMockRecorder struct {
	mock *MockMetricsReader
}

// NewMockMetricsReader creates a new mock instance.
func NewMockMetricsReader(ctrl *gomock.Controller) *MockMetricsReader {
	mock := &MockMetricsReader{ctrl: ctrl}
	mock.recorder = &MockMetricsReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsReader) EXPECT() *MockMetricsReaderMockRecorder {
	return m.recorder
}

// ReadCounter mocks base method.
func (m *MockMetricsReader) ReadCounter(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCounter", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCounter indicates an expected call of ReadCounter.
func (mr *MockMetricsReaderMockRecorder) ReadCounter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCounter", reflect.TypeOf((*MockMetricsReader)(nil).ReadCounter), arg0, arg1)
}

// ReadGauge mocks base method.
func (m *MockMetricsReader) ReadGauge(arg0 context.Context, arg1 string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadGauge", arg0, arg1)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadGauge indicates an expected call of ReadGauge.
func (mr *MockMetricsReaderMockRecorder) ReadGauge(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadGauge", reflect.TypeOf((*MockMetricsReader)(nil).ReadGauge), arg0, arg1)
}

// MockMetricsWriter is a mock of MetricsWriter interface.
type MockMetricsWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsWriterMockRecorder
	isgomock struct{}
}

// MockMetricsWriterMockRecorder is the mock recorder for MockMetricsWriter.
type MockMetricsWriterMockRecorder struct {
	mock *MockMetricsWriter
}

// NewMockMetricsWriter creates a new mock instance.
func NewMockMetricsWriter(ctrl *gomock.Controller) *MockMetricsWriter {
	mock := &MockMetricsWriter{ctrl: ctrl}
	mock.recorder = &MockMetricsWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsWriter) EXPECT() *MockMetricsWriterMockRecorder {
	return m.recorder
}

// WriteCounter mocks base method.
func (m *MockMetricsWriter) WriteCounter(arg0 context.Context, arg1 string, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteCounter", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteCounter indicates an expected call of WriteCounter.
func (mr *MockMetricsWriterMockRecorder) WriteCounter(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCounter", reflect.TypeOf((*MockMetricsWriter)(nil).WriteCounter), arg0, arg1, arg2)
}

// WriteGauge mocks base method.
func (m *MockMetricsWriter) WriteGauge(arg0 context.Context, arg1 string, arg2 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteGauge", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteGauge indicates an expected call of WriteGauge.
func (mr *MockMetricsWriterMockRecorder) WriteGauge(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteGauge", reflect.TypeOf((*MockMetricsWriter)(nil).WriteGauge), arg0, arg1, arg2)
}

// MockPinger is a mock of Pinger interface.
type MockPinger struct {
	ctrl     *gomock.Controller
	recorder *MockPingerMockRecorder
	isgomock struct{}
}

// MockPingerMockRecorder is the mock recorder for MockPinger.
type MockPingerMockRecorder struct {
	mock *MockPinger
}

// NewMockPinger creates a new mock instance.
func NewMockPinger(ctrl *gomock.Controller) *MockPinger {
	mock := &MockPinger{ctrl: ctrl}
	mock.recorder = &MockPingerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPinger) EXPECT() *MockPingerMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockPinger) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPingerMockRecorder) Ping(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPinger)(nil).Ping), arg0)
}

// MockGaugesCountersWriter is a mock of GaugesCountersWriter interface.
type MockGaugesCountersWriter struct {
	ctrl     *gomock.Controller
	recorder *MockGaugesCountersWriterMockRecorder
	isgomock struct{}
}

// MockGaugesCountersWriterMockRecorder is the mock recorder for MockGaugesCountersWriter.
type MockGaugesCountersWriterMockRecorder struct {
	mock *MockGaugesCountersWriter
}

// NewMockGaugesCountersWriter creates a new mock instance.
func NewMockGaugesCountersWriter(ctrl *gomock.Controller) *MockGaugesCountersWriter {
	mock := &MockGaugesCountersWriter{ctrl: ctrl}
	mock.recorder = &MockGaugesCountersWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGaugesCountersWriter) EXPECT() *MockGaugesCountersWriterMockRecorder {
	return m.recorder
}

// WriteGaugesCounters mocks base method.
func (m *MockGaugesCountersWriter) WriteGaugesCounters(ctx context.Context, gauges map[string]float64, counters map[string]int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteGaugesCounters", ctx, gauges, counters)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteGaugesCounters indicates an expected call of WriteGaugesCounters.
func (mr *MockGaugesCountersWriterMockRecorder) WriteGaugesCounters(ctx, gauges, counters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteGaugesCounters", reflect.TypeOf((*MockGaugesCountersWriter)(nil).WriteGaugesCounters), ctx, gauges, counters)
}
